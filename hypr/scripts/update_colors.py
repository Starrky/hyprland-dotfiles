#!/usr/bin/env python3
import subprocess
import os
import json
import sys
import re
import time

# ----------------------
# CONFIG PATHS
# ----------------------
colors_file = os.path.expanduser("~/.config/hypr/colors.conf")
decoration_file = os.path.expanduser("~/.config/hypr/decoration.conf")
waybar_css_file = os.path.expanduser("~/.config/waybar/style.css")
rofi_colors_file = os.path.expanduser("~/.config/rofi/colors.rasi")
kitty_colors_file = os.path.expanduser("~/.config/kitty/colors.conf")
swaync_css_file = os.path.expanduser("~/.config/swaync/colors.css")
wallpaper_file = sys.argv[1] if len(sys.argv) > 1 else "/home/kuba/.config/hypr/Wallpapers/"

# ----------------------
# SET WALLPAPER (Hyprpaper)
# ----------------------
wallpapers_dir = "/home/kuba/.config/hypr/Wallpapers/"
hyprpaper_conf = os.path.expanduser("~/.config/hypr/hyprpaper.conf")

# Get all wallpapers (jpg, png, jpeg)
wallpapers = sorted(
    [os.path.join(wallpapers_dir, f) for f in os.listdir(wallpapers_dir)
     if f.lower().endswith((".jpg", ".jpeg", ".png"))],
    key=os.path.getmtime,
    reverse=True
)

if not wallpapers:
    print("‚ö†Ô∏è No wallpapers found in Wallpapers folder!")
    sys.exit(1)

# Pick most recent wallpaper
wallpaper_file = wallpapers[0]
print(f"üé® Using wallpaper: {os.path.basename(wallpaper_file)}")

# Detect monitors from Hyprland
try:
    monitors_json = subprocess.run(["hyprctl", "monitors", "-j"], capture_output=True, text=True)
    monitors = json.loads(monitors_json.stdout)
except Exception:
    print("‚ö†Ô∏è Could not get monitor list, using fallback monitor eDP-1")
    monitors = [{"name": "eDP-1"}]

# Write hyprpaper.conf
with open(hyprpaper_conf, "w") as f:
    f.write("# Generated by pywal script\n")
    f.write(f"preload = {wallpaper_file}\n")
    for mon in monitors:
        f.write(f"wallpaper = {mon['name']},{wallpaper_file}\n")

# Restart hyprpaper with new config
subprocess.run(["pkill", "hyprpaper"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
time.sleep(0.3)
subprocess.Popen(["hyprpaper", "--config", hyprpaper_conf])


# ----------------------
# GENERATE PYWAL COLORS
# ----------------------
subprocess.run(["wal", "-i", wallpaper_file, "-q"])

# Load pywal JSON
with open(os.path.expanduser("~/.cache/wal/colors.json")) as f:
    data = json.load(f)

special = data.get("special", {})
colors = data.get("colors", {})

# ----------------------
# HELPER FUNCTIONS
# ----------------------
def hex_to_rgba(h):
    h = h.lstrip("#")
    if len(h) == 6:
        h += "ff"
    return f"rgba({h})"

def hex_to_hypr_rgba(h, alpha="ff"):
    h = h.lstrip("#")
    if len(h) == 6:
        h += alpha
    return f"0x{h}"

# ----------------------
# MATERIAL COLOR MAPPING
# ----------------------
material_mapping = {
    "$background": special.get("background", "#1a110f"),
    "$surface": special.get("background", "#1a110f"),
    "$surface_dim": special.get("background", "#1a110f"),
    "$on_background": special.get("foreground", "#f1dfda"),
    "$on_surface": special.get("foreground", "#f1dfda"),
    "$primary": colors.get("color1", "#ffb59d"),
    "$primary_container": colors.get("color1", "#723520"),
    "$secondary": colors.get("color2", "#e7bdb0"),
    "$secondary_container": colors.get("color2", "#5d4036"),
    "$tertiary": colors.get("color3", "#d7c68d"),
    "$tertiary_container": colors.get("color3", "#51461a"),
    "$accent": colors.get("color5", "#ff79c6"),
    "$error": colors.get("color1", "#ffb4ab"),
    "$on_primary": special.get("foreground", "#55200c"),
    "$on_secondary": special.get("foreground", "#442a21"),
    "$on_tertiary": special.get("foreground", "#3a3005"),
    "$outline": colors.get("color0", "#888888")
}

# ----------------------
# UPDATE COLORS.CONF (Hyprland)
# ----------------------
with open(colors_file, "w") as f:
    f.write("# Generated by pywal\n\n")
    for k, v in material_mapping.items():
        f.write(f"{k} = {hex_to_rgba(v)}\n")

# ----------------------
# UPDATE DECORATION.CONF (Hyprland)
# ----------------------
active_color = hex_to_hypr_rgba(colors.get("color2", "#50fa7b"))
inactive_color = hex_to_hypr_rgba(colors.get("color8", "#44475a"))
shadow_color = "0x33000000"

with open(decoration_file, "w") as f:
    f.write("# Generated by pywal\n\n")
    f.write("decoration {\n")
    f.write("    rounding = 10\n")
    f.write("    active_opacity = 1.0\n")
    f.write("    inactive_opacity = 0.9\n")
    f.write("    fullscreen_opacity = 1.0\n\n")
    f.write("    blur {\n")
    f.write("        enabled = true\n")
    f.write("        size = 3\n")
    f.write("        passes = 4\n")
    f.write("        new_optimizations = on\n")
    f.write("        ignore_opacity = true\n")
    f.write("        xray = true\n")
    f.write("    }\n\n")
    f.write("    shadow {\n")
    f.write("        enabled = true\n")
    f.write("        range = 10\n")
    f.write("        render_power = 2\n")
    f.write(f"        color = {shadow_color}\n")
    f.write("    }\n")
    f.write("}\n")

# ----------------------
# UPDATE WAYBAR STYLE.CSS
# ----------------------
if os.path.exists(waybar_css_file):
    with open(waybar_css_file, "r") as f:
        css_content = f.read()

    color_mapping_waybar = {
        "window#waybar": material_mapping["$background"],
        "#workspaces button": material_mapping["$surface"],
        "#workspaces button:hover": material_mapping["$accent"],
        "#workspaces button.active": material_mapping["$primary"],
        "#workspaces button.urgent": material_mapping["$error"],
        "#clock": material_mapping["$on_background"],
        "#pulseaudio": material_mapping["$on_background"],
        "#custom-logo": material_mapping["$primary"],
        "#custom-power": material_mapping["$error"],
        "#custom-spotify": material_mapping["$accent"],
        "#custom-notification": material_mapping["$secondary"],
        "#cpu": material_mapping["$tertiary"],
        "#tray": material_mapping["$on_background"],
        "#memory": material_mapping["$secondary"],
        "#window": material_mapping["$on_surface"],
        "#mpris": material_mapping["$primary"],
    }

    for selector, new_color in color_mapping_waybar.items():
        css_content = re.sub(
            rf"({re.escape(selector)}\s*{{[^}}]*?)color\s*:\s*#[0-9a-fA-F]+",
            rf"\1color: {new_color}",
            css_content,
            flags=re.MULTILINE | re.DOTALL,
        )
        css_content = re.sub(
            rf"({re.escape(selector)}\s*{{[^}}]*?)background-color\s*:\s*#[0-9a-fA-F]+",
            rf"\1background-color: {new_color}",
            css_content,
            flags=re.MULTILINE | re.DOTALL,
        )

    with open(waybar_css_file, "w") as f:
        f.write(css_content)

# ----------------------
# UPDATE ROFI COLORS.RASI
# ----------------------
rofi_template = f"""
* {{
    background: {material_mapping['$background']};
    foreground: {material_mapping['$on_background']};
    selected-background: {material_mapping['$primary']};
    selected-foreground: {material_mapping['$on_primary']};
    active-background: {material_mapping['$accent']};
    active-foreground: {material_mapping['$on_primary']};
    urgent-background: {material_mapping['$error']};
    urgent-foreground: {material_mapping['$on_primary']};
    border-color: {material_mapping['$outline']};
}}
"""
with open(rofi_colors_file, "w") as f:
    f.write(rofi_template)

# ----------------------
# UPDATE KITTY COLORS.CONF
# ----------------------
kitty_template = f"""
# Generated by pywal
background {material_mapping['$background']}
foreground {material_mapping['$on_background']}
cursor {material_mapping['$accent']}
selection_background {material_mapping['$primary']}
selection_foreground {material_mapping['$on_primary']}

color0 {colors.get('color0', '#000000')}
color1 {colors.get('color1', '#ff0000')}
color2 {colors.get('color2', '#00ff00')}
color3 {colors.get('color3', '#ffff00')}
color4 {colors.get('color4', '#0000ff')}
color5 {colors.get('color5', '#ff00ff')}
color6 {colors.get('color6', '#00ffff')}
color7 {colors.get('color7', '#c0c0c0')}
color8 {colors.get('color8', '#808080')}
color9 {colors.get('color9', '#ff5555')}
color10 {colors.get('color10', '#50fa7b')}
color11 {colors.get('color11', '#f1fa8c')}
color12 {colors.get('color12', '#bd93f9')}
color13 {colors.get('color13', '#ff79c6')}
color14 {colors.get('color14', '#8be9fd')}
color15 {colors.get('color15', '#ffffff')}
"""
with open(kitty_colors_file, "w") as f:
    f.write(kitty_template)
# Reload Kitty colors
subprocess.run(["kitty", "@", "set-colors", "--all", "--all", "--config", kitty_colors_file])

# ----------------------
# UPDATE SWAYNC COLORS.CSS
# ----------------------
if os.path.exists(swaync_css_file):
    with open(swaync_css_file, "r") as f:
        swaync_content = f.read()

    swaync_color_mapping = {
        "noti-border-color": material_mapping.get("$on_surface", "#cdd6f4"),
        "noti-bg": material_mapping.get("$background", "#010001"),
        "noti-bg-hover-alt": material_mapping.get("$surface_variant", "#45475a"),
        "noti-bg-alt": material_mapping.get("$surface_variant", "#45475a"),
        "noti-fg": material_mapping.get("$on_surface", "#e1c5e1"),
        "noti-bg-hover": material_mapping.get("$primary", "#724B8E"),
        "noti-bg-focus": material_mapping.get("$surface", "#1e1e2e"),
        "noti-close-bg": material_mapping.get("$primary", "#724B8E"),
        "noti-close-bg-hover": material_mapping.get("$accent", "#E25ECF"),
        "noti-urgent": material_mapping.get("$secondary", "#4A9AAF"),
        "bg-selected": material_mapping.get("$surface", "#1e1e2e"),
    }

    for var, new_color in swaync_color_mapping.items():
        swaync_content = re.sub(
            rf"(@define-color\s+{re.escape(var)}\s+)#[0-9a-fA-F]+;",
            rf"\1{new_color};",
            swaync_content
        )

    with open(swaync_css_file, "w") as f:
        f.write(swaync_content)
    # Reload Swaync
    subprocess.run(["pkill", "-USR1", "swaync"])

# ----------------------
# RELOAD HYPRLAND
# ----------------------
subprocess.run(["hyprctl", "reload"])

print("Wallpaper, Hyprland, Waybar, Rofi, Kitty, and Swaync updated successfully!")
